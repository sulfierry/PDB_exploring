import csv
import os
import requests

class M8:
    """Classe para processar arquivos .m8 gerados pelo MMseqs2"""

    def __init__(self, dir_path):
        
        self.dir_path = dir_path

    def read_m8(self, file_path):
        
        results = []
        headers = [
            "query_id", "subject_id", "specie", "perc_identity",
            "alignment_length", "mismatches", "gap_opens", "query_start", 
            "query_end", "subject_start", "subject_end", "evalue", "bit_score"
        ]

        with open(file_path, 'r') as file:
            for line in file:
                columns = line.strip().split('\t')
                
                # Inserir o nome científico (penúltima coluna) na terceira posição
                species = columns[-1]
                columns.insert(2, species)

                results.append(dict(zip(headers, columns)))

        return results

    def save_to_csv(self, data, output_file):
        with open(output_file, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=data[0].keys())
            writer.writeheader()
            for row in data:
                writer.writerow(row)

    def print_formatted(self, data):
        headers = [key for key in data[0].keys() if key != 'query_id']
        
        # Definindo larguras para cada coluna
        col_widths = {
            "subject_id": 30, "specie": 60,
            "perc_identity": 15, "alignment_length": 20, "mismatches": 15,
            "gap_opens": 12, "query_start": 12, "query_end": 12,
            "subject_start": 15, "subject_end": 15, "evalue": 12, "bit_score": 15
        }
        # Imprimindo os cabeçalhos formatados
        print("".join([f"{h:{col_widths[h]}}" for h in headers]))
        print("-" * sum(col_widths.values()))

        for entry in data:
            print("".join([f"{str(entry[h]):{col_widths[h]}}" for h in headers]))


    def count_lines_in_m8(self, file_path):
        with open(file_path, 'r') as file:
            return sum(1 for _ in file)

    def total_organisms_in_directory(self):
        total_count = 0
        for filename in os.listdir(self.dir_path):
            if filename.endswith(".m8"):
                file_path = os.path.join(self.dir_path, filename)
                total_count += self.count_lines_in_m8(file_path)

        return total_count

    def process_files(self):
        for filename in os.listdir(self.dir_path):
            if filename.endswith(".m8"):
                file_path = os.path.join(self.dir_path, filename)
                output_csv_path = os.path.join(self.dir_path, filename.replace(".m8", ".csv"))

                data = self.read_m8(file_path)
                self.save_to_csv(data, output_csv_path)

                print(f"Arquivo {filename} salvo em {output_csv_path}")
                print(f"\nPrimeiras 10 entradas de {filename}:")
                self.print_formatted(data[:10])
                print("\n\n")

    def save_filtered_to_csv(self, keyword, output_file):
        all_data = []

        # Itera por todos os arquivos .m8 na pasta
        for filename in os.listdir(self.dir_path):
            if filename.endswith(".m8"):
                file_path = os.path.join(self.dir_path, filename)
                data = self.read_m8(file_path)
                
                # Adicionar nome do banco de dados (arquivo .m8) a cada linha do data
                for entry in data:
                    entry["database"] = filename.replace(".m8", "")
                
                all_data.extend(data)

        # Filtra os dados baseados no keyword, verifica em todas as colunas
        filtered_data = [row for row in all_data if any(keyword in str(value) for value in row.values())]

        # Salva os dados filtrados no CSV
        self.save_to_csv(filtered_data, output_file)



def download_pdb(pdb_id):
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"
    response = requests.get(url)

    # Verifica se a resposta é válida (código de status 200 indica sucesso)
    if response.status_code == 200:
        with open(f"{pdb_id}.pdb", 'w') as file:
            file.write(response.text)
        print(f"Arquivo {pdb_id}.pdb baixado com sucesso!")
    else:
        print(f"Não foi possível baixar o PDB com o ID: {pdb_id}. Verifique se o ID é válido.")

def main():

    m8_dir = "./mmseqs_results/"
    
    m8_processor = M8(m8_dir) 
    m8_processor.process_files()
    
    total_organisms = m8_processor.total_organisms_in_directory()
    print(f"Total de organismos em todos os arquivos .m8: {total_organisms}")

    m8_processor.save_filtered_to_csv("Homo sapiens", "filtered_Homo_sapeins.csv")

    pdb_id = ("3FD5")
    download_pdb(pdb_id)

if __name__ == "__main__":
    main()
